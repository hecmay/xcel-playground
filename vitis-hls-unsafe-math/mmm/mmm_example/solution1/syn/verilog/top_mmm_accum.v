// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_mmm_accum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        grp_fu_74_p_din0,
        grp_fu_74_p_din1,
        grp_fu_74_p_dout0,
        grp_fu_74_p_ce,
        grp_fu_70_p_din0,
        grp_fu_70_p_din1,
        grp_fu_70_p_opcode,
        grp_fu_70_p_dout0,
        grp_fu_70_p_ce
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
output  [14:0] A_address0;
output   A_ce0;
input  [63:0] A_q0;
output  [14:0] B_address0;
output   B_ce0;
input  [63:0] B_q0;
output  [31:0] grp_fu_74_p_din0;
output  [31:0] grp_fu_74_p_din1;
input  [31:0] grp_fu_74_p_dout0;
output   grp_fu_74_p_ce;
output  [31:0] grp_fu_70_p_din0;
output  [31:0] grp_fu_70_p_din1;
output  [1:0] grp_fu_70_p_opcode;
input  [31:0] grp_fu_70_p_dout0;
output   grp_fu_70_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] select_ln48_fu_146_p3;
reg   [8:0] select_ln48_reg_254;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln48_fu_116_p2;
wire   [8:0] select_ln48_1_fu_155_p3;
reg   [8:0] select_ln48_1_reg_259;
wire   [0:0] trunc_ln55_fu_176_p1;
reg   [0:0] trunc_ln55_reg_264;
wire   [15:0] add_ln52_fu_185_p2;
reg   [15:0] add_ln52_reg_269;
reg   [31:0] add_reg_277;
wire    ap_CS_fsm_state11;
wire    grp_mmm_accum_Pipeline_ak_fu_81_ap_start;
wire    grp_mmm_accum_Pipeline_ak_fu_81_ap_done;
wire    grp_mmm_accum_Pipeline_ak_fu_81_ap_idle;
wire    grp_mmm_accum_Pipeline_ak_fu_81_ap_ready;
wire   [14:0] grp_mmm_accum_Pipeline_ak_fu_81_A_address0;
wire    grp_mmm_accum_Pipeline_ak_fu_81_A_ce0;
wire   [14:0] grp_mmm_accum_Pipeline_ak_fu_81_B_address0;
wire    grp_mmm_accum_Pipeline_ak_fu_81_B_ce0;
wire   [31:0] grp_mmm_accum_Pipeline_ak_fu_81_accum_out;
wire    grp_mmm_accum_Pipeline_ak_fu_81_accum_out_ap_vld;
wire   [31:0] grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din0;
wire   [31:0] grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din1;
wire   [1:0] grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_opcode;
wire    grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_ce;
wire   [31:0] grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din0;
wire   [31:0] grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din1;
wire    grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_ce;
reg    grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln52_1_fu_216_p1;
wire    ap_CS_fsm_state12;
reg   [8:0] j_fu_52;
wire   [8:0] add_ln49_fu_191_p2;
reg   [8:0] i_fu_56;
reg   [16:0] indvar_flatten_fu_60;
wire   [16:0] add_ln48_1_fu_122_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] grp_fu_93_p0;
reg   [31:0] grp_fu_93_p1;
wire   [0:0] icmp_ln49_fu_140_p2;
wire   [8:0] add_ln48_fu_134_p2;
wire   [7:0] trunc_ln52_fu_164_p1;
wire   [15:0] tmp_16_cast_fu_168_p3;
wire   [15:0] zext_ln52_fu_181_p1;
reg    grp_fu_93_ce;
reg    grp_fu_282_ce;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg = 1'b0;
end

top_mmm_accum_Pipeline_ak grp_mmm_accum_Pipeline_ak_fu_81(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mmm_accum_Pipeline_ak_fu_81_ap_start),
    .ap_done(grp_mmm_accum_Pipeline_ak_fu_81_ap_done),
    .ap_idle(grp_mmm_accum_Pipeline_ak_fu_81_ap_idle),
    .ap_ready(grp_mmm_accum_Pipeline_ak_fu_81_ap_ready),
    .select_ln48_1(select_ln48_1_reg_259),
    .trunc_ln55(trunc_ln55_reg_264),
    .A_address0(grp_mmm_accum_Pipeline_ak_fu_81_A_address0),
    .A_ce0(grp_mmm_accum_Pipeline_ak_fu_81_A_ce0),
    .A_q0(A_q0),
    .zext_ln49(select_ln48_reg_254),
    .B_address0(grp_mmm_accum_Pipeline_ak_fu_81_B_address0),
    .B_ce0(grp_mmm_accum_Pipeline_ak_fu_81_B_ce0),
    .B_q0(B_q0),
    .accum_out(grp_mmm_accum_Pipeline_ak_fu_81_accum_out),
    .accum_out_ap_vld(grp_mmm_accum_Pipeline_ak_fu_81_accum_out_ap_vld),
    .grp_fu_93_p_din0(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din0),
    .grp_fu_93_p_din1(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din1),
    .grp_fu_93_p_opcode(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_opcode),
    .grp_fu_93_p_dout0(grp_fu_70_p_dout0),
    .grp_fu_93_p_ce(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_ce),
    .grp_fu_282_p_din0(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din0),
    .grp_fu_282_p_din1(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din1),
    .grp_fu_282_p_dout0(grp_fu_74_p_dout0),
    .grp_fu_282_p_ce(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln48_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg <= 1'b1;
        end else if ((grp_mmm_accum_Pipeline_ak_fu_81_ap_ready == 1'b1)) begin
            grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_56 <= 9'd0;
    end else if (((icmp_ln48_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_56 <= select_ln48_1_fu_155_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_60 <= 17'd0;
    end else if (((icmp_ln48_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_fu_60 <= add_ln48_1_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_52 <= 9'd0;
    end else if (((icmp_ln48_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_52 <= add_ln49_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln52_reg_269 <= add_ln52_fu_185_p2;
        select_ln48_1_reg_259 <= select_ln48_1_fu_155_p3;
        select_ln48_reg_254 <= select_ln48_fu_146_p3;
        trunc_ln55_reg_264 <= trunc_ln55_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_reg_277 <= grp_fu_70_p_dout0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_mmm_accum_Pipeline_ak_fu_81_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln48_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_282_ce = grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_ce;
    end else begin
        grp_fu_282_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_ce = grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_ce;
    end else begin
        grp_fu_93_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_p0 = grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_93_p0 = grp_mmm_accum_Pipeline_ak_fu_81_accum_out;
    end else begin
        grp_fu_93_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_p1 = grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_93_p1 = 32'd0;
    end else begin
        grp_fu_93_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln48_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_mmm_accum_Pipeline_ak_fu_81_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = grp_mmm_accum_Pipeline_ak_fu_81_A_address0;

assign A_ce0 = grp_mmm_accum_Pipeline_ak_fu_81_A_ce0;

assign B_address0 = grp_mmm_accum_Pipeline_ak_fu_81_B_address0;

assign B_ce0 = grp_mmm_accum_Pipeline_ak_fu_81_B_ce0;

assign C_address0 = zext_ln52_1_fu_216_p1;

assign C_d0 = add_reg_277;

assign add_ln48_1_fu_122_p2 = (indvar_flatten_fu_60 + 17'd1);

assign add_ln48_fu_134_p2 = (i_fu_56 + 9'd1);

assign add_ln49_fu_191_p2 = (select_ln48_fu_146_p3 + 9'd1);

assign add_ln52_fu_185_p2 = (tmp_16_cast_fu_168_p3 + zext_ln52_fu_181_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_fu_70_p_ce = grp_fu_93_ce;

assign grp_fu_70_p_din0 = grp_fu_93_p0;

assign grp_fu_70_p_din1 = grp_fu_93_p1;

assign grp_fu_70_p_opcode = 2'd0;

assign grp_fu_74_p_ce = grp_fu_282_ce;

assign grp_fu_74_p_din0 = grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din0;

assign grp_fu_74_p_din1 = grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din1;

assign grp_mmm_accum_Pipeline_ak_fu_81_ap_start = grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg;

assign icmp_ln48_fu_116_p2 = ((indvar_flatten_fu_60 == 17'd65536) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_140_p2 = ((j_fu_52 == 9'd256) ? 1'b1 : 1'b0);

assign select_ln48_1_fu_155_p3 = ((icmp_ln49_fu_140_p2[0:0] == 1'b1) ? add_ln48_fu_134_p2 : i_fu_56);

assign select_ln48_fu_146_p3 = ((icmp_ln49_fu_140_p2[0:0] == 1'b1) ? 9'd0 : j_fu_52);

assign tmp_16_cast_fu_168_p3 = {{trunc_ln52_fu_164_p1}, {8'd0}};

assign trunc_ln52_fu_164_p1 = select_ln48_1_fu_155_p3[7:0];

assign trunc_ln55_fu_176_p1 = select_ln48_1_fu_155_p3[0:0];

assign zext_ln52_1_fu_216_p1 = add_ln52_reg_269;

assign zext_ln52_fu_181_p1 = select_ln48_fu_146_p3;

endmodule //top_mmm_accum
