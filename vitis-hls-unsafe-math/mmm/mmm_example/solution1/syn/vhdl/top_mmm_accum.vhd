-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_mmm_accum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_74_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_74_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_74_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_74_p_ce : OUT STD_LOGIC;
    grp_fu_70_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_70_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_70_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_70_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_70_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_mmm_accum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal select_ln48_fu_146_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln48_reg_254 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln48_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_1_fu_155_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln48_1_reg_259 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln55_fu_176_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln55_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_fu_185_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln52_reg_269 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_mmm_accum_Pipeline_ak_fu_81_ap_start : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_ap_done : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_ap_idle : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_ap_ready : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_A_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_A_ce0 : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_B_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_B_ce0 : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_accum_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_accum_out_ap_vld : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_ce : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_ce : STD_LOGIC;
    signal grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln52_1_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_fu_52 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln49_fu_191_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_56 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_60 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln48_1_fu_122_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_93_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln49_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_134_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln52_fu_164_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_fu_168_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln52_fu_181_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_93_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_mmm_accum_Pipeline_ak IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        select_ln48_1 : IN STD_LOGIC_VECTOR (8 downto 0);
        trunc_ln55 : IN STD_LOGIC_VECTOR (0 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        zext_ln49 : IN STD_LOGIC_VECTOR (8 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        accum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        accum_out_ap_vld : OUT STD_LOGIC;
        grp_fu_93_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_93_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_93_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_93_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_93_p_ce : OUT STD_LOGIC;
        grp_fu_282_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_282_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_282_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_282_p_ce : OUT STD_LOGIC );
    end component;


    component top_fadd_32ns_32ns_32_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fmul_32ns_32ns_32_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_mmm_accum_Pipeline_ak_fu_81 : component top_mmm_accum_Pipeline_ak
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmm_accum_Pipeline_ak_fu_81_ap_start,
        ap_done => grp_mmm_accum_Pipeline_ak_fu_81_ap_done,
        ap_idle => grp_mmm_accum_Pipeline_ak_fu_81_ap_idle,
        ap_ready => grp_mmm_accum_Pipeline_ak_fu_81_ap_ready,
        select_ln48_1 => select_ln48_1_reg_259,
        trunc_ln55 => trunc_ln55_reg_264,
        A_address0 => grp_mmm_accum_Pipeline_ak_fu_81_A_address0,
        A_ce0 => grp_mmm_accum_Pipeline_ak_fu_81_A_ce0,
        A_q0 => A_q0,
        zext_ln49 => select_ln48_reg_254,
        B_address0 => grp_mmm_accum_Pipeline_ak_fu_81_B_address0,
        B_ce0 => grp_mmm_accum_Pipeline_ak_fu_81_B_ce0,
        B_q0 => B_q0,
        accum_out => grp_mmm_accum_Pipeline_ak_fu_81_accum_out,
        accum_out_ap_vld => grp_mmm_accum_Pipeline_ak_fu_81_accum_out_ap_vld,
        grp_fu_93_p_din0 => grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din0,
        grp_fu_93_p_din1 => grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din1,
        grp_fu_93_p_opcode => grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_opcode,
        grp_fu_93_p_dout0 => grp_fu_70_p_dout0,
        grp_fu_93_p_ce => grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_ce,
        grp_fu_282_p_din0 => grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din0,
        grp_fu_282_p_din1 => grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din1,
        grp_fu_282_p_dout0 => grp_fu_74_p_dout0,
        grp_fu_282_p_ce => grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln48_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmm_accum_Pipeline_ak_fu_81_ap_ready = ap_const_logic_1)) then 
                    grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_56 <= ap_const_lv9_0;
            elsif (((icmp_ln48_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_56 <= select_ln48_1_fu_155_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_60 <= ap_const_lv17_0;
            elsif (((icmp_ln48_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_60 <= add_ln48_1_fu_122_p2;
            end if; 
        end if;
    end process;

    j_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_52 <= ap_const_lv9_0;
            elsif (((icmp_ln48_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_fu_52 <= add_ln49_fu_191_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln52_reg_269 <= add_ln52_fu_185_p2;
                select_ln48_1_reg_259 <= select_ln48_1_fu_155_p3;
                select_ln48_reg_254 <= select_ln48_fu_146_p3;
                trunc_ln55_reg_264 <= trunc_ln55_fu_176_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_reg_277 <= grp_fu_70_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln48_fu_116_p2, grp_mmm_accum_Pipeline_ak_fu_81_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln48_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_mmm_accum_Pipeline_ak_fu_81_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_mmm_accum_Pipeline_ak_fu_81_A_address0;
    A_ce0 <= grp_mmm_accum_Pipeline_ak_fu_81_A_ce0;
    B_address0 <= grp_mmm_accum_Pipeline_ak_fu_81_B_address0;
    B_ce0 <= grp_mmm_accum_Pipeline_ak_fu_81_B_ce0;
    C_address0 <= zext_ln52_1_fu_216_p1(16 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= add_reg_277;

    C_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln48_1_fu_122_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_60) + unsigned(ap_const_lv17_1));
    add_ln48_fu_134_p2 <= std_logic_vector(unsigned(i_fu_56) + unsigned(ap_const_lv9_1));
    add_ln49_fu_191_p2 <= std_logic_vector(unsigned(select_ln48_fu_146_p3) + unsigned(ap_const_lv9_1));
    add_ln52_fu_185_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_168_p3) + unsigned(zext_ln52_fu_181_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_mmm_accum_Pipeline_ak_fu_81_ap_done)
    begin
        if ((grp_mmm_accum_Pipeline_ak_fu_81_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln48_fu_116_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((icmp_ln48_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln48_fu_116_p2)
    begin
        if (((icmp_ln48_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_282_ce_assign_proc : process(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_ce, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_282_ce <= grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_ce;
        else 
            grp_fu_282_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_70_p_ce <= grp_fu_93_ce;
    grp_fu_70_p_din0 <= grp_fu_93_p0;
    grp_fu_70_p_din1 <= grp_fu_93_p1;
    grp_fu_70_p_opcode <= ap_const_lv2_0;
    grp_fu_74_p_ce <= grp_fu_282_ce;
    grp_fu_74_p_din0 <= grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din0;
    grp_fu_74_p_din1 <= grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_282_p_din1;

    grp_fu_93_ce_assign_proc : process(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_ce, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_ce <= grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_ce;
        else 
            grp_fu_93_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_93_p0_assign_proc : process(grp_mmm_accum_Pipeline_ak_fu_81_accum_out, grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_p0 <= grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_93_p0 <= grp_mmm_accum_Pipeline_ak_fu_81_accum_out;
        else 
            grp_fu_93_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_93_p1_assign_proc : process(grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_p1 <= grp_mmm_accum_Pipeline_ak_fu_81_grp_fu_93_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_93_p1 <= ap_const_lv32_0;
        else 
            grp_fu_93_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_mmm_accum_Pipeline_ak_fu_81_ap_start <= grp_mmm_accum_Pipeline_ak_fu_81_ap_start_reg;
    icmp_ln48_fu_116_p2 <= "1" when (indvar_flatten_fu_60 = ap_const_lv17_10000) else "0";
    icmp_ln49_fu_140_p2 <= "1" when (j_fu_52 = ap_const_lv9_100) else "0";
    select_ln48_1_fu_155_p3 <= 
        add_ln48_fu_134_p2 when (icmp_ln49_fu_140_p2(0) = '1') else 
        i_fu_56;
    select_ln48_fu_146_p3 <= 
        ap_const_lv9_0 when (icmp_ln49_fu_140_p2(0) = '1') else 
        j_fu_52;
    tmp_16_cast_fu_168_p3 <= (trunc_ln52_fu_164_p1 & ap_const_lv8_0);
    trunc_ln52_fu_164_p1 <= select_ln48_1_fu_155_p3(8 - 1 downto 0);
    trunc_ln55_fu_176_p1 <= select_ln48_1_fu_155_p3(1 - 1 downto 0);
    zext_ln52_1_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_reg_269),64));
    zext_ln52_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_146_p3),16));
end behav;
