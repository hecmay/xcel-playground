-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_mmm_voodoo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_70_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_70_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_70_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_70_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_70_p_ce : OUT STD_LOGIC;
    grp_fu_74_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_74_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_74_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_74_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_mmm_voodoo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal select_ln88_fu_188_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln88_reg_292 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln88_1_fu_197_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln88_1_reg_297 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln95_fu_218_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln95_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_227_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln92_reg_307 : STD_LOGIC_VECTOR (15 downto 0);
    signal accum_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_load_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal accum_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_load_1_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal accum_ce0 : STD_LOGIC;
    signal accum_we0 : STD_LOGIC;
    signal accum_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal accum_ce1 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_ap_start : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_ap_done : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_ap_idle : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_ap_ready : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_accum_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmm_voodoo_Pipeline_1_fu_108_accum_ce0 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_accum_we0 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_accum_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_ap_done : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_ap_idle : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_ap_ready : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_A_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_A_ce0 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_B_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_B_ce0 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce0 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_accum_we0 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_accum_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce1 : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_ce : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_ce : STD_LOGIC;
    signal grp_mmm_voodoo_Pipeline_1_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln88_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln92_1_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal j_fu_54 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln89_fu_233_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_58 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_62 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln88_1_fu_159_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_125_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln89_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln88_fu_176_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln92_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast_fu_210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln92_fu_223_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_125_ce : STD_LOGIC;
    signal grp_fu_322_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_mmm_voodoo_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        accum_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        accum_ce0 : OUT STD_LOGIC;
        accum_we0 : OUT STD_LOGIC;
        accum_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mmm_voodoo_Pipeline_ak IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        select_ln88_1 : IN STD_LOGIC_VECTOR (8 downto 0);
        trunc_ln95 : IN STD_LOGIC_VECTOR (0 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        zext_ln89 : IN STD_LOGIC_VECTOR (8 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        accum_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        accum_ce0 : OUT STD_LOGIC;
        accum_we0 : OUT STD_LOGIC;
        accum_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accum_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        accum_ce1 : OUT STD_LOGIC;
        accum_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_125_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_125_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_125_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_125_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_125_p_ce : OUT STD_LOGIC;
        grp_fu_322_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_322_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_322_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_322_p_ce : OUT STD_LOGIC );
    end component;


    component top_fadd_32ns_32ns_32_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fmul_32ns_32ns_32_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mmm_voodoo_accum_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    accum_U : component top_mmm_voodoo_accum_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => accum_address0,
        ce0 => accum_ce0,
        we0 => accum_we0,
        d0 => accum_d0,
        q0 => accum_q0,
        address1 => accum_address1,
        ce1 => accum_ce1,
        q1 => accum_q1);

    grp_mmm_voodoo_Pipeline_1_fu_108 : component top_mmm_voodoo_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmm_voodoo_Pipeline_1_fu_108_ap_start,
        ap_done => grp_mmm_voodoo_Pipeline_1_fu_108_ap_done,
        ap_idle => grp_mmm_voodoo_Pipeline_1_fu_108_ap_idle,
        ap_ready => grp_mmm_voodoo_Pipeline_1_fu_108_ap_ready,
        accum_address0 => grp_mmm_voodoo_Pipeline_1_fu_108_accum_address0,
        accum_ce0 => grp_mmm_voodoo_Pipeline_1_fu_108_accum_ce0,
        accum_we0 => grp_mmm_voodoo_Pipeline_1_fu_108_accum_we0,
        accum_d0 => grp_mmm_voodoo_Pipeline_1_fu_108_accum_d0);

    grp_mmm_voodoo_Pipeline_ak_fu_113 : component top_mmm_voodoo_Pipeline_ak
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start,
        ap_done => grp_mmm_voodoo_Pipeline_ak_fu_113_ap_done,
        ap_idle => grp_mmm_voodoo_Pipeline_ak_fu_113_ap_idle,
        ap_ready => grp_mmm_voodoo_Pipeline_ak_fu_113_ap_ready,
        select_ln88_1 => select_ln88_1_reg_297,
        trunc_ln95 => trunc_ln95_reg_302,
        A_address0 => grp_mmm_voodoo_Pipeline_ak_fu_113_A_address0,
        A_ce0 => grp_mmm_voodoo_Pipeline_ak_fu_113_A_ce0,
        A_q0 => A_q0,
        zext_ln89 => select_ln88_reg_292,
        B_address0 => grp_mmm_voodoo_Pipeline_ak_fu_113_B_address0,
        B_ce0 => grp_mmm_voodoo_Pipeline_ak_fu_113_B_ce0,
        B_q0 => B_q0,
        accum_address0 => grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address0,
        accum_ce0 => grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce0,
        accum_we0 => grp_mmm_voodoo_Pipeline_ak_fu_113_accum_we0,
        accum_d0 => grp_mmm_voodoo_Pipeline_ak_fu_113_accum_d0,
        accum_address1 => grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address1,
        accum_ce1 => grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce1,
        accum_q1 => accum_q1,
        grp_fu_125_p_din0 => grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din0,
        grp_fu_125_p_din1 => grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din1,
        grp_fu_125_p_opcode => grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_opcode,
        grp_fu_125_p_dout0 => grp_fu_70_p_dout0,
        grp_fu_125_p_ce => grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_ce,
        grp_fu_322_p_din0 => grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_din0,
        grp_fu_322_p_din1 => grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_din1,
        grp_fu_322_p_dout0 => grp_fu_74_p_dout0,
        grp_fu_322_p_ce => grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mmm_voodoo_Pipeline_1_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmm_voodoo_Pipeline_1_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln88_fu_153_p2 = ap_const_lv1_0))) then 
                    grp_mmm_voodoo_Pipeline_1_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmm_voodoo_Pipeline_1_fu_108_ap_ready = ap_const_logic_1)) then 
                    grp_mmm_voodoo_Pipeline_1_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmm_voodoo_Pipeline_ak_fu_113_ap_ready = ap_const_logic_1)) then 
                    grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_58 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_fu_58 <= select_ln88_1_fu_197_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_62 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln88_fu_153_p2 = ap_const_lv1_0))) then 
                indvar_flatten_fu_62 <= add_ln88_1_fu_159_p2;
            end if; 
        end if;
    end process;

    j_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_54 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_fu_54 <= add_ln89_fu_233_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                accum_load_1_reg_317 <= accum_q0;
                accum_load_reg_312 <= accum_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln92_reg_307 <= add_ln92_fu_227_p2;
                select_ln88_1_reg_297 <= select_ln88_1_fu_197_p3;
                select_ln88_reg_292 <= select_ln88_fu_188_p3;
                trunc_ln95_reg_302 <= trunc_ln95_fu_218_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_130 <= grp_fu_70_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_mmm_voodoo_Pipeline_1_fu_108_ap_done, grp_mmm_voodoo_Pipeline_ak_fu_113_ap_done, ap_CS_fsm_state2, icmp_ln88_fu_153_p2, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln88_fu_153_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_mmm_voodoo_Pipeline_1_fu_108_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_mmm_voodoo_Pipeline_ak_fu_113_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_A_address0;
    A_ce0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_A_ce0;
    B_address0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_B_address0;
    B_ce0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_B_ce0;
    C_address0 <= zext_ln92_1_fu_249_p1(16 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= reg_130;

    C_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_address0_assign_proc : process(grp_mmm_voodoo_Pipeline_1_fu_108_accum_address0, grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_address0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_address0 <= grp_mmm_voodoo_Pipeline_1_fu_108_accum_address0;
        else 
            accum_address0 <= "XXX";
        end if; 
    end process;


    accum_address1_assign_proc : process(grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address1, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_address1 <= grp_mmm_voodoo_Pipeline_ak_fu_113_accum_address1;
        else 
            accum_address1 <= "XXX";
        end if; 
    end process;


    accum_ce0_assign_proc : process(grp_mmm_voodoo_Pipeline_1_fu_108_accum_ce0, grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_ce0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_ce0 <= grp_mmm_voodoo_Pipeline_1_fu_108_accum_ce0;
        else 
            accum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accum_ce1_assign_proc : process(grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce1, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            accum_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_ce1 <= grp_mmm_voodoo_Pipeline_ak_fu_113_accum_ce1;
        else 
            accum_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    accum_d0_assign_proc : process(grp_mmm_voodoo_Pipeline_1_fu_108_accum_d0, grp_mmm_voodoo_Pipeline_ak_fu_113_accum_d0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_d0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_accum_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_d0 <= grp_mmm_voodoo_Pipeline_1_fu_108_accum_d0;
        else 
            accum_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accum_we0_assign_proc : process(grp_mmm_voodoo_Pipeline_1_fu_108_accum_we0, grp_mmm_voodoo_Pipeline_ak_fu_113_accum_we0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            accum_we0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_accum_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            accum_we0 <= grp_mmm_voodoo_Pipeline_1_fu_108_accum_we0;
        else 
            accum_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln88_1_fu_159_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_62) + unsigned(ap_const_lv17_1));
    add_ln88_fu_176_p2 <= std_logic_vector(unsigned(i_fu_58) + unsigned(ap_const_lv9_1));
    add_ln89_fu_233_p2 <= std_logic_vector(unsigned(select_ln88_fu_188_p3) + unsigned(ap_const_lv9_1));
    add_ln92_fu_227_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_210_p3) + unsigned(zext_ln92_fu_223_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_mmm_voodoo_Pipeline_1_fu_108_ap_done)
    begin
        if ((grp_mmm_voodoo_Pipeline_1_fu_108_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_mmm_voodoo_Pipeline_ak_fu_113_ap_done)
    begin
        if ((grp_mmm_voodoo_Pipeline_ak_fu_113_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln88_fu_153_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln88_fu_153_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln88_fu_153_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln88_fu_153_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_125_ce_assign_proc : process(grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_ce, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_125_ce <= grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_ce;
        else 
            grp_fu_125_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_125_p0_assign_proc : process(reg_130, accum_load_reg_312, grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din0, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_125_p0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_125_p0 <= reg_130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_125_p0 <= accum_load_reg_312;
        else 
            grp_fu_125_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_125_p1_assign_proc : process(accum_load_1_reg_317, grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din1, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_125_p1 <= grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_125_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_125_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_125_p1 <= accum_load_1_reg_317;
        else 
            grp_fu_125_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_322_ce_assign_proc : process(grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_ce, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_322_ce <= grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_ce;
        else 
            grp_fu_322_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_70_p_ce <= grp_fu_125_ce;
    grp_fu_70_p_din0 <= grp_fu_125_p0;
    grp_fu_70_p_din1 <= grp_fu_125_p1;
    grp_fu_70_p_opcode <= ap_const_lv2_0;
    grp_fu_74_p_ce <= grp_fu_322_ce;
    grp_fu_74_p_din0 <= grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_din0;
    grp_fu_74_p_din1 <= grp_mmm_voodoo_Pipeline_ak_fu_113_grp_fu_322_p_din1;
    grp_mmm_voodoo_Pipeline_1_fu_108_ap_start <= grp_mmm_voodoo_Pipeline_1_fu_108_ap_start_reg;
    grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start <= grp_mmm_voodoo_Pipeline_ak_fu_113_ap_start_reg;
    icmp_ln88_fu_153_p2 <= "1" when (indvar_flatten_fu_62 = ap_const_lv17_10000) else "0";
    icmp_ln89_fu_182_p2 <= "1" when (j_fu_54 = ap_const_lv9_100) else "0";
    select_ln88_1_fu_197_p3 <= 
        add_ln88_fu_176_p2 when (icmp_ln89_fu_182_p2(0) = '1') else 
        i_fu_58;
    select_ln88_fu_188_p3 <= 
        ap_const_lv9_0 when (icmp_ln89_fu_182_p2(0) = '1') else 
        j_fu_54;
    tmp_4_cast_fu_210_p3 <= (trunc_ln92_fu_206_p1 & ap_const_lv8_0);
    trunc_ln92_fu_206_p1 <= select_ln88_1_fu_197_p3(8 - 1 downto 0);
    trunc_ln95_fu_218_p1 <= select_ln88_1_fu_197_p3(1 - 1 downto 0);
    zext_ln92_1_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_reg_307),64));
    zext_ln92_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_fu_188_p3),16));
end behav;
