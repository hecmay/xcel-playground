-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_top,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.454000,HLS_SYN_LAT=427425803,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3141,HLS_SYN_LUT=3602,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_mmm_basic_fu_30_ap_start : STD_LOGIC;
    signal grp_mmm_basic_fu_30_ap_done : STD_LOGIC;
    signal grp_mmm_basic_fu_30_ap_idle : STD_LOGIC;
    signal grp_mmm_basic_fu_30_ap_ready : STD_LOGIC;
    signal grp_mmm_basic_fu_30_C_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mmm_basic_fu_30_C_ce0 : STD_LOGIC;
    signal grp_mmm_basic_fu_30_C_we0 : STD_LOGIC;
    signal grp_mmm_basic_fu_30_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_basic_fu_30_A_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_basic_fu_30_A_ce0 : STD_LOGIC;
    signal grp_mmm_basic_fu_30_B_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_basic_fu_30_B_ce0 : STD_LOGIC;
    signal grp_mmm_basic_fu_30_grp_fu_70_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_basic_fu_30_grp_fu_70_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_basic_fu_30_grp_fu_70_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmm_basic_fu_30_grp_fu_70_p_ce : STD_LOGIC;
    signal grp_mmm_basic_fu_30_grp_fu_74_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_basic_fu_30_grp_fu_74_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_basic_fu_30_grp_fu_74_p_ce : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_ap_start : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_ap_done : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_ap_idle : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_ap_ready : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_C_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mmm_accum2_fu_40_C_ce0 : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_C_we0 : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum2_fu_40_A_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_accum2_fu_40_A_ce0 : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_B_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_accum2_fu_40_B_ce0 : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_grp_fu_70_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum2_fu_40_grp_fu_70_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum2_fu_40_grp_fu_70_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmm_accum2_fu_40_grp_fu_70_p_ce : STD_LOGIC;
    signal grp_mmm_accum2_fu_40_grp_fu_74_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum2_fu_40_grp_fu_74_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum2_fu_40_grp_fu_74_p_ce : STD_LOGIC;
    signal grp_mmm_accum_fu_50_ap_start : STD_LOGIC;
    signal grp_mmm_accum_fu_50_ap_done : STD_LOGIC;
    signal grp_mmm_accum_fu_50_ap_idle : STD_LOGIC;
    signal grp_mmm_accum_fu_50_ap_ready : STD_LOGIC;
    signal grp_mmm_accum_fu_50_C_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mmm_accum_fu_50_C_ce0 : STD_LOGIC;
    signal grp_mmm_accum_fu_50_C_we0 : STD_LOGIC;
    signal grp_mmm_accum_fu_50_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_fu_50_A_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_accum_fu_50_A_ce0 : STD_LOGIC;
    signal grp_mmm_accum_fu_50_B_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_accum_fu_50_B_ce0 : STD_LOGIC;
    signal grp_mmm_accum_fu_50_grp_fu_74_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_fu_50_grp_fu_74_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_fu_50_grp_fu_74_p_ce : STD_LOGIC;
    signal grp_mmm_accum_fu_50_grp_fu_70_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_fu_50_grp_fu_70_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_accum_fu_50_grp_fu_70_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmm_accum_fu_50_grp_fu_70_p_ce : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_ap_start : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_ap_done : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_ap_idle : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_ap_ready : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_C_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mmm_voodoo_fu_60_C_ce0 : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_C_we0 : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_fu_60_A_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_voodoo_fu_60_A_ce0 : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_B_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_mmm_voodoo_fu_60_B_ce0 : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_grp_fu_70_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_fu_60_grp_fu_70_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_fu_60_grp_fu_70_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmm_voodoo_fu_60_grp_fu_70_p_ce : STD_LOGIC;
    signal grp_mmm_voodoo_fu_60_grp_fu_74_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_fu_60_grp_fu_74_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmm_voodoo_fu_60_grp_fu_74_p_ce : STD_LOGIC;
    signal grp_mmm_basic_fu_30_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_mmm_accum2_fu_40_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_mmm_accum_fu_50_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_mmm_voodoo_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_70_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_70_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_70_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_70_ce : STD_LOGIC;
    signal grp_fu_74_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_74_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_74_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_74_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_mmm_basic IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_70_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_70_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_ce : OUT STD_LOGIC;
        grp_fu_74_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_ce : OUT STD_LOGIC );
    end component;


    component top_mmm_accum2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_70_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_70_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_ce : OUT STD_LOGIC;
        grp_fu_74_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_ce : OUT STD_LOGIC );
    end component;


    component top_mmm_accum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_74_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_ce : OUT STD_LOGIC;
        grp_fu_70_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_70_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_ce : OUT STD_LOGIC );
    end component;


    component top_mmm_voodoo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_70_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_70_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_70_p_ce : OUT STD_LOGIC;
        grp_fu_74_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_74_p_ce : OUT STD_LOGIC );
    end component;


    component top_fadd_32ns_32ns_32_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fmul_32ns_32ns_32_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_mmm_basic_fu_30 : component top_mmm_basic
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmm_basic_fu_30_ap_start,
        ap_done => grp_mmm_basic_fu_30_ap_done,
        ap_idle => grp_mmm_basic_fu_30_ap_idle,
        ap_ready => grp_mmm_basic_fu_30_ap_ready,
        C_address0 => grp_mmm_basic_fu_30_C_address0,
        C_ce0 => grp_mmm_basic_fu_30_C_ce0,
        C_we0 => grp_mmm_basic_fu_30_C_we0,
        C_d0 => grp_mmm_basic_fu_30_C_d0,
        A_address0 => grp_mmm_basic_fu_30_A_address0,
        A_ce0 => grp_mmm_basic_fu_30_A_ce0,
        A_q0 => A_q0,
        B_address0 => grp_mmm_basic_fu_30_B_address0,
        B_ce0 => grp_mmm_basic_fu_30_B_ce0,
        B_q0 => B_q0,
        grp_fu_70_p_din0 => grp_mmm_basic_fu_30_grp_fu_70_p_din0,
        grp_fu_70_p_din1 => grp_mmm_basic_fu_30_grp_fu_70_p_din1,
        grp_fu_70_p_opcode => grp_mmm_basic_fu_30_grp_fu_70_p_opcode,
        grp_fu_70_p_dout0 => grp_fu_70_p2,
        grp_fu_70_p_ce => grp_mmm_basic_fu_30_grp_fu_70_p_ce,
        grp_fu_74_p_din0 => grp_mmm_basic_fu_30_grp_fu_74_p_din0,
        grp_fu_74_p_din1 => grp_mmm_basic_fu_30_grp_fu_74_p_din1,
        grp_fu_74_p_dout0 => grp_fu_74_p2,
        grp_fu_74_p_ce => grp_mmm_basic_fu_30_grp_fu_74_p_ce);

    grp_mmm_accum2_fu_40 : component top_mmm_accum2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmm_accum2_fu_40_ap_start,
        ap_done => grp_mmm_accum2_fu_40_ap_done,
        ap_idle => grp_mmm_accum2_fu_40_ap_idle,
        ap_ready => grp_mmm_accum2_fu_40_ap_ready,
        C_address0 => grp_mmm_accum2_fu_40_C_address0,
        C_ce0 => grp_mmm_accum2_fu_40_C_ce0,
        C_we0 => grp_mmm_accum2_fu_40_C_we0,
        C_d0 => grp_mmm_accum2_fu_40_C_d0,
        A_address0 => grp_mmm_accum2_fu_40_A_address0,
        A_ce0 => grp_mmm_accum2_fu_40_A_ce0,
        A_q0 => A_q0,
        B_address0 => grp_mmm_accum2_fu_40_B_address0,
        B_ce0 => grp_mmm_accum2_fu_40_B_ce0,
        B_q0 => B_q0,
        grp_fu_70_p_din0 => grp_mmm_accum2_fu_40_grp_fu_70_p_din0,
        grp_fu_70_p_din1 => grp_mmm_accum2_fu_40_grp_fu_70_p_din1,
        grp_fu_70_p_opcode => grp_mmm_accum2_fu_40_grp_fu_70_p_opcode,
        grp_fu_70_p_dout0 => grp_fu_70_p2,
        grp_fu_70_p_ce => grp_mmm_accum2_fu_40_grp_fu_70_p_ce,
        grp_fu_74_p_din0 => grp_mmm_accum2_fu_40_grp_fu_74_p_din0,
        grp_fu_74_p_din1 => grp_mmm_accum2_fu_40_grp_fu_74_p_din1,
        grp_fu_74_p_dout0 => grp_fu_74_p2,
        grp_fu_74_p_ce => grp_mmm_accum2_fu_40_grp_fu_74_p_ce);

    grp_mmm_accum_fu_50 : component top_mmm_accum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmm_accum_fu_50_ap_start,
        ap_done => grp_mmm_accum_fu_50_ap_done,
        ap_idle => grp_mmm_accum_fu_50_ap_idle,
        ap_ready => grp_mmm_accum_fu_50_ap_ready,
        C_address0 => grp_mmm_accum_fu_50_C_address0,
        C_ce0 => grp_mmm_accum_fu_50_C_ce0,
        C_we0 => grp_mmm_accum_fu_50_C_we0,
        C_d0 => grp_mmm_accum_fu_50_C_d0,
        A_address0 => grp_mmm_accum_fu_50_A_address0,
        A_ce0 => grp_mmm_accum_fu_50_A_ce0,
        A_q0 => A_q0,
        B_address0 => grp_mmm_accum_fu_50_B_address0,
        B_ce0 => grp_mmm_accum_fu_50_B_ce0,
        B_q0 => B_q0,
        grp_fu_74_p_din0 => grp_mmm_accum_fu_50_grp_fu_74_p_din0,
        grp_fu_74_p_din1 => grp_mmm_accum_fu_50_grp_fu_74_p_din1,
        grp_fu_74_p_dout0 => grp_fu_74_p2,
        grp_fu_74_p_ce => grp_mmm_accum_fu_50_grp_fu_74_p_ce,
        grp_fu_70_p_din0 => grp_mmm_accum_fu_50_grp_fu_70_p_din0,
        grp_fu_70_p_din1 => grp_mmm_accum_fu_50_grp_fu_70_p_din1,
        grp_fu_70_p_opcode => grp_mmm_accum_fu_50_grp_fu_70_p_opcode,
        grp_fu_70_p_dout0 => grp_fu_70_p2,
        grp_fu_70_p_ce => grp_mmm_accum_fu_50_grp_fu_70_p_ce);

    grp_mmm_voodoo_fu_60 : component top_mmm_voodoo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmm_voodoo_fu_60_ap_start,
        ap_done => grp_mmm_voodoo_fu_60_ap_done,
        ap_idle => grp_mmm_voodoo_fu_60_ap_idle,
        ap_ready => grp_mmm_voodoo_fu_60_ap_ready,
        C_address0 => grp_mmm_voodoo_fu_60_C_address0,
        C_ce0 => grp_mmm_voodoo_fu_60_C_ce0,
        C_we0 => grp_mmm_voodoo_fu_60_C_we0,
        C_d0 => grp_mmm_voodoo_fu_60_C_d0,
        A_address0 => grp_mmm_voodoo_fu_60_A_address0,
        A_ce0 => grp_mmm_voodoo_fu_60_A_ce0,
        A_q0 => A_q0,
        B_address0 => grp_mmm_voodoo_fu_60_B_address0,
        B_ce0 => grp_mmm_voodoo_fu_60_B_ce0,
        B_q0 => B_q0,
        grp_fu_70_p_din0 => grp_mmm_voodoo_fu_60_grp_fu_70_p_din0,
        grp_fu_70_p_din1 => grp_mmm_voodoo_fu_60_grp_fu_70_p_din1,
        grp_fu_70_p_opcode => grp_mmm_voodoo_fu_60_grp_fu_70_p_opcode,
        grp_fu_70_p_dout0 => grp_fu_70_p2,
        grp_fu_70_p_ce => grp_mmm_voodoo_fu_60_grp_fu_70_p_ce,
        grp_fu_74_p_din0 => grp_mmm_voodoo_fu_60_grp_fu_74_p_din0,
        grp_fu_74_p_din1 => grp_mmm_voodoo_fu_60_grp_fu_74_p_din1,
        grp_fu_74_p_dout0 => grp_fu_74_p2,
        grp_fu_74_p_ce => grp_mmm_voodoo_fu_60_grp_fu_74_p_ce);

    fadd_32ns_32ns_32_8_full_dsp_1_U64 : component top_fadd_32ns_32ns_32_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_70_p0,
        din1 => grp_fu_70_p1,
        ce => grp_fu_70_ce,
        dout => grp_fu_70_p2);

    fmul_32ns_32ns_32_5_max_dsp_1_U65 : component top_fmul_32ns_32ns_32_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_74_p0,
        din1 => grp_fu_74_p1,
        ce => grp_fu_74_ce,
        dout => grp_fu_74_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mmm_accum2_fu_40_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmm_accum2_fu_40_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_mmm_accum2_fu_40_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmm_accum2_fu_40_ap_ready = ap_const_logic_1)) then 
                    grp_mmm_accum2_fu_40_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmm_accum_fu_50_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmm_accum_fu_50_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_mmm_accum_fu_50_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmm_accum_fu_50_ap_ready = ap_const_logic_1)) then 
                    grp_mmm_accum_fu_50_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmm_basic_fu_30_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmm_basic_fu_30_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_mmm_basic_fu_30_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmm_basic_fu_30_ap_ready = ap_const_logic_1)) then 
                    grp_mmm_basic_fu_30_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmm_voodoo_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmm_voodoo_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_mmm_voodoo_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmm_voodoo_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_mmm_voodoo_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_mmm_basic_fu_30_ap_done, grp_mmm_accum2_fu_40_ap_done, grp_mmm_accum_fu_50_ap_done, grp_mmm_voodoo_fu_60_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_mmm_basic_fu_30_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_mmm_accum2_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_mmm_accum_fu_50_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_mmm_voodoo_fu_60_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(grp_mmm_basic_fu_30_A_address0, grp_mmm_accum2_fu_40_A_address0, grp_mmm_accum_fu_50_A_address0, grp_mmm_voodoo_fu_60_A_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address0 <= grp_mmm_voodoo_fu_60_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= grp_mmm_accum_fu_50_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= grp_mmm_accum2_fu_40_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= grp_mmm_basic_fu_30_A_address0;
        else 
            A_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(grp_mmm_basic_fu_30_A_ce0, grp_mmm_accum2_fu_40_A_ce0, grp_mmm_accum_fu_50_A_ce0, grp_mmm_voodoo_fu_60_A_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_ce0 <= grp_mmm_voodoo_fu_60_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce0 <= grp_mmm_accum_fu_50_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_ce0 <= grp_mmm_accum2_fu_40_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_ce0 <= grp_mmm_basic_fu_30_A_ce0;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(grp_mmm_basic_fu_30_B_address0, grp_mmm_accum2_fu_40_B_address0, grp_mmm_accum_fu_50_B_address0, grp_mmm_voodoo_fu_60_B_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            B_address0 <= grp_mmm_voodoo_fu_60_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_address0 <= grp_mmm_accum_fu_50_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_address0 <= grp_mmm_accum2_fu_40_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address0 <= grp_mmm_basic_fu_30_B_address0;
        else 
            B_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(grp_mmm_basic_fu_30_B_ce0, grp_mmm_accum2_fu_40_B_ce0, grp_mmm_accum_fu_50_B_ce0, grp_mmm_voodoo_fu_60_B_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            B_ce0 <= grp_mmm_voodoo_fu_60_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_ce0 <= grp_mmm_accum_fu_50_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_ce0 <= grp_mmm_accum2_fu_40_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_ce0 <= grp_mmm_basic_fu_30_B_ce0;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(grp_mmm_basic_fu_30_C_address0, grp_mmm_accum2_fu_40_C_address0, grp_mmm_accum_fu_50_C_address0, grp_mmm_voodoo_fu_60_C_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_address0 <= grp_mmm_voodoo_fu_60_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_address0 <= grp_mmm_accum_fu_50_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_address0 <= grp_mmm_accum2_fu_40_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_address0 <= grp_mmm_basic_fu_30_C_address0;
        else 
            C_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(grp_mmm_basic_fu_30_C_ce0, grp_mmm_accum2_fu_40_C_ce0, grp_mmm_accum_fu_50_C_ce0, grp_mmm_voodoo_fu_60_C_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_ce0 <= grp_mmm_voodoo_fu_60_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_ce0 <= grp_mmm_accum_fu_50_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_ce0 <= grp_mmm_accum2_fu_40_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_ce0 <= grp_mmm_basic_fu_30_C_ce0;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(grp_mmm_basic_fu_30_C_d0, grp_mmm_accum2_fu_40_C_d0, grp_mmm_accum_fu_50_C_d0, grp_mmm_voodoo_fu_60_C_d0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_d0 <= grp_mmm_voodoo_fu_60_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_d0 <= grp_mmm_accum_fu_50_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_d0 <= grp_mmm_accum2_fu_40_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_d0 <= grp_mmm_basic_fu_30_C_d0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(grp_mmm_basic_fu_30_C_we0, grp_mmm_accum2_fu_40_C_we0, grp_mmm_accum_fu_50_C_we0, grp_mmm_voodoo_fu_60_C_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_we0 <= grp_mmm_voodoo_fu_60_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_we0 <= grp_mmm_accum_fu_50_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_we0 <= grp_mmm_accum2_fu_40_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_we0 <= grp_mmm_basic_fu_30_C_we0;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_mmm_basic_fu_30_ap_done)
    begin
        if ((grp_mmm_basic_fu_30_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_mmm_accum2_fu_40_ap_done)
    begin
        if ((grp_mmm_accum2_fu_40_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_mmm_accum_fu_50_ap_done)
    begin
        if ((grp_mmm_accum_fu_50_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_mmm_voodoo_fu_60_ap_done)
    begin
        if ((grp_mmm_voodoo_fu_60_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_mmm_voodoo_fu_60_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_mmm_voodoo_fu_60_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;

    ap_ready_assign_proc : process(grp_mmm_voodoo_fu_60_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_mmm_voodoo_fu_60_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_70_ce_assign_proc : process(grp_mmm_basic_fu_30_grp_fu_70_p_ce, grp_mmm_accum2_fu_40_grp_fu_70_p_ce, grp_mmm_accum_fu_50_grp_fu_70_p_ce, grp_mmm_voodoo_fu_60_grp_fu_70_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_70_ce <= grp_mmm_voodoo_fu_60_grp_fu_70_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_70_ce <= grp_mmm_accum_fu_50_grp_fu_70_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_70_ce <= grp_mmm_accum2_fu_40_grp_fu_70_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_70_ce <= grp_mmm_basic_fu_30_grp_fu_70_p_ce;
        else 
            grp_fu_70_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_70_p0_assign_proc : process(grp_mmm_basic_fu_30_grp_fu_70_p_din0, grp_mmm_accum2_fu_40_grp_fu_70_p_din0, grp_mmm_accum_fu_50_grp_fu_70_p_din0, grp_mmm_voodoo_fu_60_grp_fu_70_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_70_p0 <= grp_mmm_voodoo_fu_60_grp_fu_70_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_70_p0 <= grp_mmm_accum_fu_50_grp_fu_70_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_70_p0 <= grp_mmm_accum2_fu_40_grp_fu_70_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_70_p0 <= grp_mmm_basic_fu_30_grp_fu_70_p_din0;
        else 
            grp_fu_70_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_70_p1_assign_proc : process(grp_mmm_basic_fu_30_grp_fu_70_p_din1, grp_mmm_accum2_fu_40_grp_fu_70_p_din1, grp_mmm_accum_fu_50_grp_fu_70_p_din1, grp_mmm_voodoo_fu_60_grp_fu_70_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_70_p1 <= grp_mmm_voodoo_fu_60_grp_fu_70_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_70_p1 <= grp_mmm_accum_fu_50_grp_fu_70_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_70_p1 <= grp_mmm_accum2_fu_40_grp_fu_70_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_70_p1 <= grp_mmm_basic_fu_30_grp_fu_70_p_din1;
        else 
            grp_fu_70_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_74_ce_assign_proc : process(grp_mmm_basic_fu_30_grp_fu_74_p_ce, grp_mmm_accum2_fu_40_grp_fu_74_p_ce, grp_mmm_accum_fu_50_grp_fu_74_p_ce, grp_mmm_voodoo_fu_60_grp_fu_74_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_74_ce <= grp_mmm_voodoo_fu_60_grp_fu_74_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_74_ce <= grp_mmm_accum_fu_50_grp_fu_74_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_74_ce <= grp_mmm_accum2_fu_40_grp_fu_74_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_74_ce <= grp_mmm_basic_fu_30_grp_fu_74_p_ce;
        else 
            grp_fu_74_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_74_p0_assign_proc : process(grp_mmm_basic_fu_30_grp_fu_74_p_din0, grp_mmm_accum2_fu_40_grp_fu_74_p_din0, grp_mmm_accum_fu_50_grp_fu_74_p_din0, grp_mmm_voodoo_fu_60_grp_fu_74_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_74_p0 <= grp_mmm_voodoo_fu_60_grp_fu_74_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_74_p0 <= grp_mmm_accum_fu_50_grp_fu_74_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_74_p0 <= grp_mmm_accum2_fu_40_grp_fu_74_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_74_p0 <= grp_mmm_basic_fu_30_grp_fu_74_p_din0;
        else 
            grp_fu_74_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_74_p1_assign_proc : process(grp_mmm_basic_fu_30_grp_fu_74_p_din1, grp_mmm_accum2_fu_40_grp_fu_74_p_din1, grp_mmm_accum_fu_50_grp_fu_74_p_din1, grp_mmm_voodoo_fu_60_grp_fu_74_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_74_p1 <= grp_mmm_voodoo_fu_60_grp_fu_74_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_74_p1 <= grp_mmm_accum_fu_50_grp_fu_74_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_74_p1 <= grp_mmm_accum2_fu_40_grp_fu_74_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_74_p1 <= grp_mmm_basic_fu_30_grp_fu_74_p_din1;
        else 
            grp_fu_74_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_mmm_accum2_fu_40_ap_start <= grp_mmm_accum2_fu_40_ap_start_reg;
    grp_mmm_accum_fu_50_ap_start <= grp_mmm_accum_fu_50_ap_start_reg;
    grp_mmm_basic_fu_30_ap_start <= grp_mmm_basic_fu_30_ap_start_reg;
    grp_mmm_voodoo_fu_60_ap_start <= grp_mmm_voodoo_fu_60_ap_start_reg;
end behav;
