// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="blocked_accum_blocked_accum,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.263000,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=112,HLS_SYN_LUT=181,HLS_VERSION=2019_2_1}" *)

module blocked_accum_blocked_accum (
        clk,
        reset,
        strm_in_V_TDATA,
        strm_in_V_TVALID,
        strm_in_V_TREADY,
        strm_out_V_TDATA,
        strm_out_V_TVALID,
        strm_out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   clk;
input   reset;
input  [31:0] strm_in_V_TDATA;
input   strm_in_V_TVALID;
output   strm_in_V_TREADY;
output  [31:0] strm_out_V_TDATA;
output   strm_out_V_TVALID;
input   strm_out_V_TREADY;

wire ap_clk;
wire ap_rst_n;
assign ap_clk = clk;
assign ap_rst_n = ~reset;

reg strm_in_V_TREADY;
reg strm_out_V_TVALID;

 reg    ap_rst_n_inv;
reg    strm_in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln12_fu_120_p2;
reg    strm_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state6;
reg   [3:0] i_1_reg_96;
reg   [31:0] sum_reg_107;
wire   [3:0] add_ln12_fu_126_p2;
reg    ap_block_state2;
wire   [0:0] icmp_ln16_fu_137_p2;
reg   [0:0] icmp_ln16_reg_168;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] add_ln16_fu_143_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] sum_1_fu_154_p2;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg   [3:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
wire   [31:0] buf_q0;
reg   [3:0] i_reg_85;
wire    ap_CS_fsm_state1;
wire    ap_block_pp1_stage0;
wire   [63:0] i_cast_fu_132_p1;
wire   [63:0] i_1_cast_fu_149_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
  ap_CS_fsm = 5'd1;
  ap_enable_reg_pp1_iter0 = 1'b0;
  ap_enable_reg_pp1_iter1 = 1'b0;
end

blocked_accum_blocked_accum_buf #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .we0(buf_we0),
    .d0(strm_in_V_TDATA),
    .q0(buf_q0)
);

blocked_accum_blocked_accum_add_4ns_4ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
blocked_accum_add_4ns_4ns_4_1_1_U1(
    .din0(i_reg_85),
    .din1(4'd1),
    .dout(add_ln12_fu_126_p2)
);

blocked_accum_blocked_accum_add_4ns_4ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
blocked_accum_add_4ns_4ns_4_1_1_U2(
    .din0(i_1_reg_96),
    .din1(4'd1),
    .dout(add_ln16_fu_143_p2)
);

blocked_accum_blocked_accum_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
blocked_accum_add_32ns_32ns_32_1_1_U3(
    .din0(buf_q0),
    .din1(sum_reg_107),
    .dout(sum_1_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_96 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln16_fu_137_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_96 <= add_ln16_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_85 <= 4'd0;
    end else if ((~((strm_in_V_TVALID == 1'b0) & (icmp_ln12_fu_120_p2 == 1'd0)) & (icmp_ln12_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_85 <= add_ln12_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_reg_107 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln16_reg_168 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_reg_107 <= sum_1_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln16_reg_168 <= icmp_ln16_fu_137_p2;
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_137_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        buf_address0 = i_1_cast_fu_149_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_address0 = i_cast_fu_132_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((strm_in_V_TVALID == 1'b0) & (icmp_ln12_fu_120_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((strm_in_V_TVALID == 1'b0) & (icmp_ln12_fu_120_p2 == 1'd0)) & (icmp_ln12_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        buf_we0 = 1'b1;
    end else begin
        buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_TDATA_blk_n = strm_in_V_TVALID;
    end else begin
        strm_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((strm_in_V_TVALID == 1'b0) & (icmp_ln12_fu_120_p2 == 1'd0)) & (icmp_ln12_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_TREADY = 1'b1;
    end else begin
        strm_in_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        strm_out_V_TDATA_blk_n = strm_out_V_TREADY;
    end else begin
        strm_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (strm_out_V_TREADY == 1'b1))) begin
        strm_out_V_TVALID = 1'b1;
    end else begin
        strm_out_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((strm_in_V_TVALID == 1'b0) & (icmp_ln12_fu_120_p2 == 1'd0)) & (icmp_ln12_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((strm_in_V_TVALID == 1'b0) & (icmp_ln12_fu_120_p2 == 1'd0)) & (icmp_ln12_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln16_fu_137_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln16_fu_137_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (strm_out_V_TREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((strm_in_V_TVALID == 1'b0) & (icmp_ln12_fu_120_p2 == 1'd0));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_cast_fu_149_p1 = i_1_reg_96;

assign i_cast_fu_132_p1 = i_reg_85;

assign icmp_ln12_fu_120_p2 = ((i_reg_85 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_137_p2 = ((i_1_reg_96 == 4'd10) ? 1'b1 : 1'b0);

assign strm_out_V_TDATA = sum_reg_107;

endmodule //blocked_accum_blocked_accum
